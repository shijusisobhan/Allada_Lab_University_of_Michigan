#head(sample_Info)
sample_Info <- GetSampleInfo(gset)
head(sample_Info)
library('stringr')
smaple_Info$sample_name <- str_c(David.char$work.shift,'_', David.char$time.of.sample)
library('stringr')
smaple_Info$sample_name <- str_c(sample_Info$work.shift,'_', sample_Info$time.of.sample)
library('stringr')
smaple_Info$sample_name <- str_c(sample_Info$work.shift,'_', sample_Info$time.of.sample)
head(smaple_Info)
sample_name<-c(NA, NA, t(smaple_Info$sample_name))
Expression_matrix<-rbind(sample_name, gset_exp_GeneName)
Expression_matrix[1:5,1:5]
ID_Gene<- dplyr::select(gpl_table,'ID', 'ILMN_Gene') # select the ID and gene name
gset_expr_ProbID<-(subset(gset_expr_ProbID, Probe_ID %in% ID_Gene$ID)) # subset matching IDs
gset_exp_GeneName<-dplyr::right_join(x = ID_Gene,y=gset_expr_ProbID,  by = c("ID" = "Probe_ID")) # Combine gene name with gene expression
gset_exp_GeneName<-gset_exp_GeneName[-1]
gset_exp_GeneName[1:5,1:5]
ID_Gene<- dplyr::select(gpl_table,'ID', 'ILMN_Gene') # select the ID and gene name
gset_expr_ProbID<-(subset(gset_expr_ProbID, Probe_ID %in% ID_Gene$ID)) # subset matching IDs
gset_exp_GeneName<-dplyr::right_join(x = ID_Gene,y=gset_expr_ProbID,  by = c("ID" = "Probe_ID")) # Combine gene name with gene expression
gset_exp_GeneName<-gset_exp_GeneName[-1]
colnames(gset_exp_GeneName$ILMN_Gene)<-'Gene_symbol'
ID_Gene<- dplyr::select(gpl_table,'ID', 'ILMN_Gene') # select the ID and gene name
gset_expr_ProbID<-(subset(gset_expr_ProbID, Probe_ID %in% ID_Gene$ID)) # subset matching IDs
gset_exp_GeneName<-dplyr::right_join(x = ID_Gene,y=gset_expr_ProbID,  by = c("ID" = "Probe_ID")) # Combine gene name with gene expression
gset_exp_GeneName<-gset_exp_GeneName[-1]
colnames(gset_exp_GeneName)[1]<-'Gene_symbol'
gset_exp_GeneName[1:5,1:5]
sample_Info <- GetSampleInfo(gset)
head(sample_Info)
library('stringr')
smaple_Info$sample_name <- str_c(sample_Info$work.shift,'_', sample_Info$time.of.sample)
head(smaple_Info)
sample_name<-c('Gene_symbol', t(smaple_Info$sample_name))
Expression_matrix<-rbind(sample_name, gset_exp_GeneName)
colnames(Expression_matrix)<-Expression_matrix[1,]
Expression_matrix<-Expression_matrix[-1,]
Expression_matrix[1:5,1:5]
sample_name<-c('Gene_symbol', t(smaple_Info$sample_name))
Expression_matrix<-rbind(sample_name, gset_exp_GeneName)
colnames(Expression_matrix)<-Expression_matrix[1,]
Expression_matrix<-Expression_matrix[-1,]
row.names(Expression_matrix)<-NULL
Expression_matrix[1:5,1:5]
library(GEOquery)
library(GEOquery)
library(GEOquery)
spellman <- read_csv("https://github.com/Bio723-class/example-datasets/raw/master/spellman-wide.csv")
read.csv("https://github.com/Bio723-class/example-datasets/raw/master/spellman-wide.csv")
spellman <- read.csv("https://github.com/Bio723-class/example-datasets/raw/master/spellman-wide.csv")
View(spellman)
dim(spellman
dim(spellman)
dim(spellman)
spellman.cor <- dplyr::select(spellman, -time, -expt) %>%
cor(use="pairwise.complete.obs")
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(RColorBrewer)
spellman.cor <- dplyr::select(spellman, -time, -expt) %>%
cor(use="pairwise.complete.obs")
View(spellman.cor)
View(spellman)
spellman.dist <- as.dist(1 - spellman.cor)
spellman.tree <- hclust(spellman.dist, method="complete")
View(spellman.tree)
plot(spellman.tree)
plot(spellman.tree, cex=0.2)
library(dendextend)
install.packages('dendextend')
library(dendextend)
spellman.dend <- as.dendrogram(spellman.tree) # create dendrogram object
plot(spellman.dend, leaflab = "none")
clusters <- cutree(spellman.dend, k=4)
table(clusters)
clusters[1:6]
plot(color_branches(spellman.dend, k=4),leaflab="none")
clusters <- cutree(spellman.dend, k=8, order_clusters_as_data = FALSE)
table(clusters)
clusters.df <- data.frame(gene = names(clusters), cluster = clusters)
View(clusters.df)
View(clusters.df)
cluster3.genes <- filter(clusters.df, cluster == 3)$gene
spellman.long <- gather(spellman, gene, expression, -time, -expt)
head(spellman.long)
color.scheme <- rev(brewer.pal(8,"RdBu")) # generate the color scheme to use
spellman.long %>%
filter(gene %in% cluster3.genes & expt == "alpha") %>%
ggplot(aes(x = time, y = gene)) +
geom_tile(aes(fill = expression)) +
scale_fill_gradientn(colors=color.scheme, limits = c(-2,2)) +
theme(axis.text.y = element_text(size = 6))  # set size of y axis labels
# Load braun data ## *************************************************
rm(list=ls())
setwd('D:/RNA sequencing/TimeSignature/New Project/Shiju_stanley')
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Amplitude estimator/TimeMachine-main/Time_prediction_shiju')
Data1<-read.csv('JTK_z_score_all.csv')
TS_genes<-read.csv('TS_genes_all.csv')
cycling_genes<-Data1[which(Data1$BH.Q<0.05),]
TS_cyclic_genes<-cycling_genes[cycling_genes$ext_gene %in% TS_genes$ext_genes,]
##*****************************************************************************
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]/a[2*i+2]}
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
# Load braun data ## *************************************************
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Shiju_stanley')
BR_data<-read.csv('Braun_series_arranged.csv')
#TS_genes<-read.csv('TimeTeller_genes.csv')
cycling_genes<-read.csv('JTK_Results_Braun.csv')
#BR_cyclic_TS_data<-subset(cycling_genes, (ext_gene %in% TS_genes$ext_gene))
BR_cycling_genes<-merge(BR_data, cycling_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
BR_cycling_genes<-BR_cycling_genes[-(1:11), , drop = FALSE] # Drop first 11 genes which are irrelevent
BR_cycling_genes= BR_cycling_genes[!duplicated(BR_cycling_genes$ext_gene),] # Avoide duplicate ext genes
rownames(BR_cycling_genes) <- NULL
##*****************************************************************************
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]/a[2*i+2]}
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
genes_combination_numeric<-apply(BR_cycling_genes[,2:10],2, cbn_fun) # Pairwise combination
genes_combination_numeric<-apply(BR_cycling_genes[1:10,2:10],2, cbn_fun) # Pairwise combination
View(genes_combination_numeric)
genes_name_combination<-cbn_fun(BR_cycling_genes[1:10,1])
View(genes_name_combination)
NN<-(nrow(genes_combination_numeric))/2
View(genes_combination_numeric)
genes_ratio_numeric<-apply(genes_combination_numeric[,1:9], 2, ratio_genes_fun, n=NN) # Ratio
View(genes_ratio_numeric)
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
View(genes_ratio_all)
View(BR_cycling_genes)
# Load braun data ## *************************************************
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Shiju_stanley')
BR_data<-read.csv('Braun_series_arranged.csv')
#TS_genes<-read.csv('TimeTeller_genes.csv')
cycling_genes<-read.csv('JTK_Results_Braun.csv')
#BR_cyclic_TS_data<-subset(cycling_genes, (ext_gene %in% TS_genes$ext_gene))
BR_cycling_genes<-merge(BR_data, cycling_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
BR_cycling_genes<-BR_cycling_genes[-(1:11), , drop = FALSE] # Drop first 11 genes which are irrelevent
BR_cycling_genes= BR_cycling_genes[!duplicated(BR_cycling_genes$ext_gene),] # Avoide duplicate ext genes
rownames(BR_cycling_genes) <- NULL
##*****************************************************************************
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]/a[2*i+2]}
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
genes_combination_numeric<-apply(BR_cycling_genes[1:10,145:155],2, cbn_fun) # Pairwise combination
genes_name_combination<-cbn_fun(BR_cycling_genes[1:10,1])
NN<-(nrow(genes_combination_numeric))/2
genes_ratio_numeric<-apply(genes_combination_numeric[,1:10], 2, ratio_genes_fun, n=NN) # Ratio
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
genes_ratio_all$LAG_diff<-LAG_diff_fun(genes_combination_numeric[,11],n=NN)
row.names(genes_ratio_all)<-genes_name_ratio
View(genes_ratio_all)
genes_ratio_all<-genes_ratio_all[which(genes_ratio_all$LAG_diff>=6), ]
genes_ratio_all<-genes_ratio_all[which((24-genes_ratio_all$LAG_diff)>=6), ]
View(genes_ratio_all)
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Shiju_stanley')
BR_data<-read.csv('Braun_series_arranged.csv')
View(BR_data)
cycling_genes<-read.csv('JTK_Results_Braun.csv')
View(cycling_genes)
BR_cycling_genes<-merge(BR_data, cycling_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
BR_cycling_genes<-BR_cycling_genes[-(1:11), , drop = FALSE] # Drop first 11 genes which are irrelevent
BR_cycling_genes= BR_cycling_genes[!duplicated(BR_cycling_genes$ext_gene),] # Avoide duplicate ext genes
rownames(BR_cycling_genes) <- NULL
genes_combination_numeric<-apply(BR_cycling_genes[1:10,145:155],2, cbn_fun) # Pairwise combination
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]/a[2*i+2]}
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
genes_combination_numeric<-apply(BR_cycling_genes[1:10,145:155],2, cbn_fun) # Pairwise combination
View(genes_combination_numeric)
View(genes_combination_numeric)
genes_name_combination<-cbn_fun(BR_cycling_genes[1:10,1])
NN<-(nrow(genes_combination_numeric))/2
genes_ratio_numeric<-apply(genes_combination_numeric[,1:10], 2, ratio_genes_fun, n=NN) # Ratio
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
View(genes_ratio_numeric)
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
genes_ratio_all$LAG_diff<-LAG_diff_fun(genes_combination_numeric[,11],n=NN)
row.names(genes_ratio_all)<-genes_name_ratio
rm(list=ls())
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Amplitude estimator/TimeMachine-main/Time_prediction_shiju')
MAB_data<-read.csv('Moller_archer_Broun_data.csv')
View(MAB_data)
MAB_data<-MAB_data[-c(1,2),]
JTK_results<-read.csv('JTK_z_score_all.csv')
TS_genes<-read.csv('TS_genes_all.csv')
JTK_results<-JTK_results[which(JTK_results$BH.Q<0.05),]
View(JTK_results)
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Amplitude estimator/TimeMachine-main/Time_prediction_shiju')
MAB_data<-read.csv('Moller_archer_Broun_data.csv')
MAB_data<-MAB_data[-c(1,2),]
JTK_results<-read.csv('JTK_z_score_all.csv')
cycling_genes<-JTK_results[which(JTK_results$BH.Q<0.05),]
TS_genes<-read.csv('TS_genes_all.csv')
TS_cyclic_genes<-cycling_genes[cycling_genes$ext_gene %in% TS_genes$ext_genes,]
View(MAB_data)
MAB_TS<-MAB_data[MAB_data$ext_gene %in% TS_cyclic_genes$ext_gene,]
View(MAB_TS)
MAB_TS_JTK<-merge(MAB_TS, TS_cyclic_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
View(MAB_TS_JTK)
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]-a[2*i+2]}  # (log (a/b) = log(a) - log (b))
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
View(MAB_TS_JTK)
genes_combination_numeric<-apply(MAB_TS_JTK[,2:768],2, cbn_fun) # Pairwise combination
View(genes_combination_numeric)
View(MAB_TS)
View(genes_combination_numeric)
genes_name_combination<-cbn_fun(MAB_TS_JTK[1])
genes_name_combination<-cbn_fun(MAB_TS_JTK[1,])
genes_name_combination<-cbn_fun(MAB_TS_JTK[,1])
View(genes_name_combination)
NN<-(nrow(genes_combination_numeric))/2
View(genes_combination_numeric)
genes_ratio_numeric<-apply(genes_combination_numeric[,1:766], 2, ratio_genes_fun, n=NN) # Ratio
View(genes_ratio_numeric)
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
genes_ratio_all$LAG_diff<-LAG_diff_fun(genes_combination_numeric[,767],n=NN)
View(genes_ratio_all)
row.names(genes_ratio_all)<-genes_name_ratio
genes_ratio_all<-genes_ratio_all[which(genes_ratio_all$LAG_diff>=6), ]
genes_ratio_all<-genes_ratio_all[which((24-genes_ratio_all$LAG_diff)>=6), ]
View(genes_ratio_all)
write.csv(genes_ratio_all, 'test_result.csv')
rm(list=ls())
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Amplitude estimator/TimeMachine-main/Time_prediction_shiju')
Archer_Data<-read.csv('Archer_data_and_DLMO_all.csv')
Braun_data<-read.csv('Braun_data_and_DLMO_all.csv')
Mollar_Data<-read.csv('Moller_data_and_DLMO_all.csv')
MAB_data<-Mollar_Data %>% left_join(Archer_Data, by='ext_gene') %>%
left_join(Braun_data, by='ext_gene')
library(dplyr)
MAB_data<-Mollar_Data %>% left_join(Archer_Data, by='ext_gene') %>%
left_join(Braun_data, by='ext_gene')
View(MAB_data)
MAB_data<-MAB_data[-c(1),]
JTK_results<-read.csv('JTK_z_score_all.csv')
cycling_genes<-JTK_results[which(JTK_results$BH.Q<0.05),]
TS_genes<-read.csv('TS_genes_all.csv')
TS_cyclic_genes<-cycling_genes[cycling_genes$ext_gene %in% TS_genes$ext_genes,]
MAB_TS<-MAB_data[MAB_data$ext_gene %in% TS_cyclic_genes$ext_gene,]
MAB_TS_JTK<-merge(MAB_TS, TS_cyclic_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]-a[2*i+2]}  # (log (a/b) = log(a) - log (b))
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
genes_combination_numeric<-apply(MAB_TS_JTK[,2:768],2, cbn_fun) # Pairwise combination
genes_name_combination<-cbn_fun(MAB_TS_JTK[,1])
NN<-(nrow(genes_combination_numeric))/2
genes_ratio_numeric<-apply(genes_combination_numeric[,1:766], 2, ratio_genes_fun, n=NN) # Ratio
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
genes_ratio_all$LAG_diff<-LAG_diff_fun(genes_combination_numeric[,767],n=NN)
row.names(genes_ratio_all)<-genes_name_ratio
genes_ratio_all<-genes_ratio_all[which(genes_ratio_all$LAG_diff>=6), ]
genes_ratio_all<-genes_ratio_all[which((24-genes_ratio_all$LAG_diff)>=6), ]
View(genes_ratio_all)
write.csv(genes_ratio_all, 'Gene_ratio_MAB_6-18hr.csv')
View(MAB_data)
View(genes_ratio_all)
setwd('C:/Users/shijusis/OneDrive - Michigan Medicine/Desktop/Shiju_sisobhan/RNA sequencing/TimeSignature/New Project/Amplitude estimator/TimeMachine-main/Time_prediction_shiju')
Archer_Data<-read.csv('Archer_data_and_DLMO_all.csv')
Braun_data<-read.csv('Braun_data_and_DLMO_all.csv')
Mollar_Data<-read.csv('Moller_data_and_DLMO_all.csv')
MAB_data<-Mollar_Data %>% left_join(Archer_Data, by='ext_gene') %>%
left_join(Braun_data, by='ext_gene')
View(MAB_data)
DLMO25<-t(MAB_data[1,-1])
View(DLMO25)
#MAB_data<-read.csv('Moller_archer_Broun_data.csv')
MAB_data<-MAB_data[-c(1),]
JTK_results<-read.csv('JTK_z_score_all.csv')
cycling_genes<-JTK_results[which(JTK_results$BH.Q<0.05),]
TS_genes<-read.csv('TS_genes_all.csv')
TS_cyclic_genes<-cycling_genes[cycling_genes$ext_gene %in% TS_genes$ext_genes,]
MAB_TS<-MAB_data[MAB_data$ext_gene %in% TS_cyclic_genes$ext_gene,]
MAB_TS_JTK<-merge(MAB_TS, TS_cyclic_genes[c('ext_gene', 'LAG')], by.x=1 , by.y="ext_gene")
##*****************************************************************************
cbn_fun<-function(a){combn(a,2)} # Pairwise gene combination function
ratio_genes_fun<-function(a, n){
B=c()
for (i in 0:n-1) {B[i+1]<-a[2*i+1]-a[2*i+2]}  # (log (a/b) = log(a) - log (b))
B
} # ratio of pairs
LAG_diff_fun<-function(a,n){
B=c()
for (i in 0:n-1) {
B[i+1]=abs(a[2*i+1]-a[2*i+2])
}
B
} # ratio of pairs
ratio_genes_name_fun<-function(a,n){
G_N=c()
for (i in 0:n-1) {G_N[i+1]<-paste(a[2*i+1],',', a[2*i+2])}
G_N
} # ratio of pairs
genes_combination_numeric<-apply(MAB_TS_JTK[,2:768],2, cbn_fun) # Pairwise combination
genes_name_combination<-cbn_fun(MAB_TS_JTK[,1])
NN<-(nrow(genes_combination_numeric))/2
#********************************************
genes_ratio_numeric<-apply(genes_combination_numeric[,1:766], 2, ratio_genes_fun, n=NN) # Ratio
genes_name_ratio<-ratio_genes_name_fun(genes_name_combination,n=NN) # Ratio
genes_ratio_all<-as.data.frame(genes_ratio_numeric)
genes_ratio_all$LAG_diff<-LAG_diff_fun(genes_combination_numeric[,767],n=NN)
row.names(genes_ratio_all)<-genes_name_ratio
genes_ratio_all<-genes_ratio_all[which(genes_ratio_all$LAG_diff>=6), ]
genes_ratio_all<-genes_ratio_all[which((24-genes_ratio_all$LAG_diff)>=6), ]
ratio.expr<-t(genes_ratio_all[,1:355]) # genes on the column and ratios in the rows
View(ratio.expr)
DLMO25_angle<-(DLMO25[1:355]%%24)*2*pi/24
# Convert angle into cartesian coordinates
y1<-sin(DLMO25_angle) # sin(a)
y2<-cos(DLMO25_angle) # cos(a)
y=data.frame(y1,y2) # y= [sin(a) cos(a)]
n=nrow(y)
train_rows<-sample(1:n, 0.66*n)
x_train<-ratio.expr[train_rows,]
x_test<-ratio.expr[-train_rows,]
x_train<-data.matrix(x_train) # Just for data handling convert it into matrix
x_test<-data.matrix(x_test)
y_train<-y[train_rows,]
y_test<-y[-train_rows,]
y_train<-data.matrix(y_train)
y_test<-data.matrix(y_test)
Ridge_regg<-cv.glmnet(x_train, y_train, keep=T, alpha=0.5, family='mgaussian')
library(limma)
library(glmnet)
Ridge_regg<-cv.glmnet(x_train, y_train, keep=T, alpha=0.5, family='mgaussian')
Pred_net<-(predict(Ridge_regg, s=Ridge_regg$lambda.1se, newx = x_test))
Pred_angle<-Pred_net[,,1] # Extract the predicted angle
Pred_Time<-(atan2(Pred_angle[,1],Pred_angle[,2])%%(2*pi))*(24/(2*pi)) # convert back angle to time
y_test_Time<-(atan2(y_test[,1],y_test[,2])%%(2*pi))*(24/(2*pi))
MSE_time<-mean((Pred_Time-y_test_Time)^2)
MSE_time
plot(y_test_Time, Pred_Time)
hrerr <- abs(Pred_Time-y_test_Time)
hrerr <- hrerr[!is.na(hrerr)]
hrerr <- pmin(hrerr,24-hrerr)
mederr=median(abs(hrerr))
hrsoff <- seq(0,12,length=49)
fracacc <- sapply(hrsoff,function(hrtol){
100*sum(abs(hrerr)>hrtol)/length(hrerr)
})
norm.fracacc <- (100-fracacc)/100
norm.hrsoff <- hrsoff/12
auc <- round(sum(norm.fracacc[-1]*diff(norm.hrsoff)), digit=2)
plot(hrsoff,100-fracacc,type='l', xlim=c(0,12), xlab = "correct to within (hrs)",
ylab= '% correct', main=  paste0("Moller et al. (", 'auc:', auc, ")"))
abline(a=0,b=100/12,col="grey")
# Compute the ROC curve and AUC
roc_obj <- roc(y_test_Time,  Pred_Time)
ratio.expr<-t(genes_ratio_all[,356:613]) # genes on the column and ratios in the rows
#Conver time into angles --->   a=2*pi*time/24
DLMO25_angle<-(DLMO25[356:613]%%24)*2*pi/24
# Convert angle into cartesian coordinates
y1<-sin(DLMO25_angle) # sin(a)
y2<-cos(DLMO25_angle) # cos(a)
y=data.frame(y1,y2) # y= [sin(a) cos(a)]
Pred_net<-(predict(Ridge_regg, s=Ridge_regg$lambda.1se, newx = ratio.expr))
Pred_angle<-Pred_net[,,1] # Extract the predicted angle
Pred_Time<-(atan2(Pred_angle[,1],Pred_angle[,2])%%(2*pi))*(24/(2*pi)) # convert back angle to time
y_test_Time<-(atan2(y[,1],y[,2])%%(2*pi))*(24/(2*pi))
## ****plot original time vs predicted time ************
plot(y_test_Time, Pred_Time, main='Archer et al.',
xlab='True', ylab='Predicted')
hrerr <- abs(Pred_Time-y_test_Time)
hrerr <- hrerr[!is.na(hrerr)]
hrerr <- pmin(hrerr,24-hrerr)
mederr=median(abs(hrerr))
hrsoff <- seq(0,12,length=49)
fracacc <- sapply(hrsoff,function(hrtol){
100*sum(abs(hrerr)>hrtol)/length(hrerr)
})
norm.fracacc <- (100-fracacc)/100
norm.hrsoff <- hrsoff/12
auc <- round(sum(norm.fracacc[-1]*diff(norm.hrsoff)), digit=2)
plot(hrsoff,100-fracacc,type='l', xlim=c(0,12), xlab = "correct to within (hrs)",
ylab= '% correct', main=  paste0("Archer et al. (", 'auc:', auc, ")"))
abline(a=0,b=100/12,col="grey")
#ratio.expr<-t(genes_ratio_all[,356:613]) # genes on the column and ratios in the rows
ratio.expr<-t(genes_ratio_all[,614:766])
#Conver time into angles --->   a=2*pi*time/24
#DLMO25_angle<-(DLMO25[356:613]%%24)*2*pi/24
DLMO25_angle<-(DLMO25[614:766]%%24)*2*pi/24
# Convert angle into cartesian coordinates
y1<-sin(DLMO25_angle) # sin(a)
y2<-cos(DLMO25_angle) # cos(a)
y=data.frame(y1,y2) # y= [sin(a) cos(a)]
Pred_net<-(predict(Ridge_regg, s=Ridge_regg$lambda.1se, newx = ratio.expr))
Pred_angle<-Pred_net[,,1] # Extract the predicted angle
Pred_Time<-(atan2(Pred_angle[,1],Pred_angle[,2])%%(2*pi))*(24/(2*pi)) # convert back angle to time
y_test_Time<-(atan2(y[,1],y[,2])%%(2*pi))*(24/(2*pi))
## ****plot original time vs predicted time ************
plot(y_test_Time, Pred_Time, main='Braun et al.',
xlab='True', ylab='Predicted')
hrerr <- abs(Pred_Time-y_test_Time)
hrerr <- hrerr[!is.na(hrerr)]
hrerr <- pmin(hrerr,24-hrerr)
mederr=median(abs(hrerr))
hrsoff <- seq(0,12,length=49)
fracacc <- sapply(hrsoff,function(hrtol){
100*sum(abs(hrerr)>hrtol)/length(hrerr)
})
norm.fracacc <- (100-fracacc)/100
norm.hrsoff <- hrsoff/12
auc <- round(sum(norm.fracacc[-1]*diff(norm.hrsoff)), digit=2)
plot(hrsoff,100-fracacc,type='l', xlim=c(0,12), xlab = "correct to within (hrs)",
ylab= '% correct', main=  paste0("Braun et al. (", 'auc:', auc, ")"))
abline(a=0,b=100/12,col="grey")
View(DLMO25)
View(MAB_TS)
View(genes_ratio_all)
